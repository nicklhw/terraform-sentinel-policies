# This policy uses the tfconfig/v2 and tfplan/v2 import to check that the MAL code input variable
# to a module is a substring of the workspace name

##### Imports #####
import "tfconfig-functions" as config
import "tfplan/v2" as plan
import "tfrun" as run
import "strings"
import "http"
import "json"


##### Parameters #####
# The address of the Terraform Cloud or Terraform Enterprise server
param address default "app.terraform.io"

# A valid Terraform Cloud or Terraform Enterprise API token
param token


##### Functions #####

# Get workspace variable
get_ws_var = func(address, workspace_id, token, var_name) {

    # Build request to get workspace variables
    req1 = http.request("https://" + address + "/api/v2/workspaces/"  +
                     workspace_id + "/vars")

    req1 = req1.with_header("Authorization", "Bearer " + token)

    # Call TFC/E API to get modules and unmarshal results
    res1 = json.unmarshal(http.get(req1).body)

    wsVar = filter res1.data as v {
      v.attributes.key == var_name
    }

    return wsVar[0].attributes.value
}

# Get the mal_code input value from a module call
# returns null if the module does not have a mal_code input
get_mal_code_value = func(address, mc) {
  if "mal_code" in mc.config {
    mal_code_attr = mc.config.mal_code
    if "constant_value" in mal_code_attr {
      # Found constant_value for mal_code input
      return mal_code_attr.constant_value
    } else if "references" in mal_code_attr {
      # Found references for mal_code input
      # Get the first reference since we expect only a single variable reference
      attributes = strings.split(mal_code_attr.references[0], ".")
      if attributes[0] is "var" {
        # Fetch variable value from tfplan
        return plan.variables[attributes[1]].value
      } else {
        # Unable to resolve non variable references
        return null
      }
    }
  } else {
    print("Module", address, "does not have an input variable called mal_code")
    return null
  }
}



##### Rules #####

# Get all module calls
all_module_calls = config.find_all_module_calls()

# Get mal_code workspace variable
mal_code_ws_var = get_ws_var(address, run.workspace.id, token, "mal_code")

ws_var_mismatch = filter all_module_calls as address, mc {
    mal_code_ws_var != get_mal_code_value(address, mc)
}

# Print any violations
for ws_var_mismatch as address, mc {
    mal_code = get_mal_code_value(address, mc)
    print("Module", address, "mal_code", mal_code, "does not equal workspace mal_code", mal_code_ws_var)
}

# Main rule
main = rule {
    length(ws_var_mismatch) is 0
}